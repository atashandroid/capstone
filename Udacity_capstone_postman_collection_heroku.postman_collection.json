{
	"info": {
		"_postman_id": "c650018e-34b9-4cd3-93d0-93df0a79c3f2",
		"name": "Udacity_capstone_postman_collection_heroku",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Assistant_test",
			"item": [
				{
					"name": "/musicians",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains musicians array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.musicians).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/musicians",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains compositions array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.compositions).to.be.an('array')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/compositions",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlkzbUQ0c19Tc3M5VGZXUHdReFgxMCJ9.eyJpc3MiOiJodHRwczovL2F0YXNoLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MGY0MzQwNDYxMGE3NjAwNjllYzM3N2MiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjI2NzE2NTI0LCJleHAiOjE2MjY4MDI5MjQsImF6cCI6IkZKTUVGaERCTHRzOEZaSXN3ejZOU3VIUGVyYzdEaFJ1Iiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJnZXQ6Y29tcG9zaXRpb25zIiwiZ2V0Om11c2ljaWFucyJdfQ.s8oVbE0j7fvOjDLsxsyflLlGvC9y6Z_I4CGOJNUYDPDGYmCg7Gs3NT0xaEtTsw9WPyXPRbVMV9JfapNj24f4sL0FrYPP3JIo-Wyd5vWlE3PK_c8DPbkcRwbf4i7ktC_naZtFix4qJ0yHHzPVOKU76wV_Z_XCJsLQ2gekObTOYDnwSEJj29ZPPAvnKUII_mdtWRBrk_JkUlbPedH8EMc5Hc6OQmyjsOYaWtCK914t0yOde-U_IaCrYKWtRlihIvW15Kjes2IVtLowgxkrBIrlhNMj1R-Nzogux5oreDKmz1daC7ouI8q_5vxL9Dk38yg1lg4Hhzl0Zv1JSV1HuH7GYw",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Director_test",
			"item": [
				{
					"name": "/musicians/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Maksim Karpov\",\r\n    \"age\": 32,\r\n    \"gender\": \"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/musicians/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/plain",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Music story\",\r\n    \"release_date\": \"2021-11-06\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/compositions/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/create fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/plain",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"release_date\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/compositions/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/update/<int:id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Movie music\",\r\n    \"release_date\": \"2021-11-10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/compositions/update/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"update",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians/update/<int:id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Aleksey Krapov\",\r\n    \"age\": \"32\",\r\n    \"gender\": \"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/musicians/update/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"update",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians/delete/<int:id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/musicians/delete/5",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"delete",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/delete/<int:id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/compositions/delete/5",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"delete",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/delete/<int:id> fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/compositions/delete/20000",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"delete",
								"20000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains musicians array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.musicians).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/musicians",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains compositions array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.compositions).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/compositions",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians/create fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"age\": \"\",\r\n    \"gender\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/musicians/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians/delete/<int:id> fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/musicians/delete/20000",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"delete",
								"20000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/compositions/update/<int:id> fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Movie music\",\r\n    \"release_date\": \"2021-11-10\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/compositions/update/20000",
							"host": [
								"{{host}}"
							],
							"path": [
								"compositions",
								"update",
								"20000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/musicians/update/<int:id> fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Aleksey Krapov\",\r\n    \"age\": \"32\",\r\n    \"gender\": \"Male\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/musicians/update/20000",
							"host": [
								"{{host}}"
							],
							"path": [
								"musicians",
								"update",
								"20000"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IlkzbUQ0c19Tc3M5VGZXUHdReFgxMCJ9.eyJpc3MiOiJodHRwczovL2F0YXNoLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MGY0NDk2MjhjYjIxMjAwNjk3MmM5N2MiLCJhdWQiOiJjYXN0aW5nIiwiaWF0IjoxNjI2NzE2NDAwLCJleHAiOjE2MjY4MDI4MDAsImF6cCI6IkZKTUVGaERCTHRzOEZaSXN3ejZOU3VIUGVyYzdEaFJ1Iiwic2NvcGUiOiIiLCJwZXJtaXNzaW9ucyI6WyJkZWxldGU6Y29tcG9zaXRpb25zIiwiZGVsZXRlOm11c2ljaWFuIiwiZ2V0OmNvbXBvc2l0aW9ucyIsImdldDptdXNpY2lhbnMiLCJwYXRjaDpjb21wb3NpdGlvbnMiLCJwYXRjaDptdXNpY2lhbiIsInBvc3Q6Y29tcG9zaXRpb25zIiwicG9zdDptdXNpY2lhbiJdfQ.USFtwAAerrXxuRyWzCGlDVheCo7G9_K9qx4bmKn54JUTmRogTkIOHYJFqXsIQqXQlDdq7n43diB-myP_c8Q61lPrKej_3V2VkI6PLvquCiMsn98La8kA-my7wA1t1sIzNW6jIS3s0AdKSuU4AeZ6HxGy4rTzHyx3wSoH8nGoWKz6qhOaMg4vFMV6-nCfqx7vVS6S8S_XP_v33NtM_rkogMPOqA4GL32ywCAq4sctovZkEXvZBm7oew4QDstd8tNGfAxftJ9iFDWp2F_PT0q5HSgsi4KrRgVhj6nEytR_E_c7eNxVEQXBb7mIiHNQuT_EOamdX04NrZx3XClvqCRiIQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://musicalcompositions.herokuapp.com"
		}
	]
}